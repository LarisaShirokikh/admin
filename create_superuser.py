#!/usr/bin/env python3
# create_superuser.py
"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
"""

import sys
import os
import getpass
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

async def create_superuser():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ ===")
    
    try:
        print("1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏...")
        from app.deps import get_db
        from app.crud.admin import admin_user
        from app.schemas.admin import AdminUserCreate
        print("‚úÖ CRUD –∏ —Å—Ö–µ–º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        print("2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î...")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é get_db()
        db_generator = get_db()
        db = await db_generator.__anext__()
        
        try:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
            
            print("3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤...")
            existing_admins = await admin_user.get_multi(db, limit=5)
            if existing_admins:
                print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(existing_admins)} –∞–¥–º–∏–Ω–æ–≤:")
                for admin in existing_admins:
                    role = "—Å—É–ø–µ—Ä–∞–¥–º–∏–Ω" if admin.is_superuser else "–∞–¥–º–∏–Ω"
                    print(f"   - {admin.username} ({role})")
                
                confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞? (y/N): ")
                if confirm.lower() != 'y':
                    print("–û—Ç–º–µ–Ω–µ–Ω–æ")
                    return
            
            print("\n4. –í–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞...")
            
            # –í–≤–æ–¥ username
            while True:
                username = input("Username: ").strip()
                if len(username) < 3:
                    print("‚ùå Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
                    continue
                
                existing_user = await admin_user.get_by_username(db, username)
                if existing_user:
                    print(f"‚ùå Username '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue
                break
            
            # –í–≤–æ–¥ email
            while True:
                email = input("Email: ").strip()
                if '@' not in email or '.' not in email:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")
                    continue
                
                existing_email = await admin_user.get_by_email(db, email)
                if existing_email:
                    print(f"‚ùå Email '{email}' —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
                    continue
                break
            
            # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
            while True:
                password = getpass.getpass("–ü–∞—Ä–æ–ª—å: ")
                if len(password) < 6:
                    print("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
                    continue
                confirm_password = getpass.getpass("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
                if password != confirm_password:
                    print("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    continue
                break
            
            print("5. –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞...")
            # –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
            user_data = AdminUserCreate(
                username=username,
                email=email,
                password=password,
                confirm_password=password,
                is_active=True,
                is_superuser=True
            )
            
            new_user = await admin_user.create(db, user_data)
            
            print(f"\n‚úÖ –°—É–ø–µ—Ä–∞–¥–º–∏–Ω '{new_user.username}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"   ID: {new_user.id}")
            print(f"   Email: {new_user.email}")
            print(f"   –°–æ–∑–¥–∞–Ω: {new_user.created_at}")
            
            print(f"\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
            print(f"   Username: {username}")
            print(f"   Password: [–≤–∞—à –ø–∞—Ä–æ–ª—å]")
            print(f"   URL: POST /admin-api/auth/login")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞: {e}")
            import traceback
            traceback.print_exc()
            await db.rollback()
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            try:
                await db_generator.aclose()
            except:
                pass
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

async def quick_create_admin():
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("=== –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ ===")
    
    try:
        from app.deps import get_db
        from app.crud.admin import admin_user
        from app.schemas.admin import AdminUserCreate
        
        username = "admin"
        email = "admin@example.com"
        password = "admin123"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_db()
        db_generator = get_db()
        db = await db_generator.__anext__()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–¥–º–∏–Ω–∞ –µ—â–µ –Ω–µ—Ç
            existing = await admin_user.get_by_username(db, username)
            if existing:
                print(f"‚ö†Ô∏è  –ê–¥–º–∏–Ω '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                print(f"   ID: {existing.id}")
                print(f"   Email: {existing.email}")
                print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if existing.is_active else '–ù–µ—Ç'}")
                print(f"   –°—É–ø–µ—Ä–∞–¥–º–∏–Ω: {'–î–∞' if existing.is_superuser else '–ù–µ—Ç'}")
                print(f"\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
                print(f"   Username: {username}")
                print(f"   Password: {password}")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            user_data = AdminUserCreate(
                username=username,
                email=email,
                password=password,
                confirm_password=password,
                is_active=True,
                is_superuser=True
            )
            
            new_user = await admin_user.create(db, user_data)
            
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω!")
            print(f"   ID: {new_user.id}")
            print(f"   Username: {username}")
            print(f"   Password: {password}")
            print(f"   Email: {email}")
            print(f"\nüîë –ú–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É:")
            print(f"   POST /admin-api/auth/login")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            await db.rollback()
        finally:
            try:
                await db_generator.aclose()
            except:
                pass
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

async def list_admins():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤"""
    print("=== –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ ===")
    
    try:
        from app.deps import get_db
        from app.crud.admin import admin_user
        
        db_generator = get_db()
        db = await db_generator.__anext__()
        
        try:
            admins = await admin_user.get_multi(db, limit=100)
            if not admins:
                print("–ê–¥–º–∏–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            print(f"–ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤: {len(admins)}")
            print("-" * 50)
            for admin in admins:
                status = "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if admin.is_active else "‚ùå –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
                role = "üëë —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω" if admin.is_superuser else "üîß –∞–¥–º–∏–Ω"
                last_login = admin.last_login.strftime("%Y-%m-%d %H:%M") if admin.last_login else "–Ω–∏–∫–æ–≥–¥–∞"
                
                print(f"ID: {admin.id}")
                print(f"Username: {admin.username}")
                print(f"Email: {admin.email}")
                print(f"–°—Ç–∞—Ç—É—Å: {status}")
                print(f"–†–æ–ª—å: {role}")
                print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last_login}")
                print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {admin.failed_login_attempts}")
                print("-" * 50)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        finally:
            try:
                await db_generator.aclose()
            except:
                pass
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == "quick":
            asyncio.run(quick_create_admin())
        elif sys.argv[1] == "list":
            asyncio.run(list_admins())
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  python create_superuser.py         - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ")
            print("  python create_superuser.py quick   - –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (admin/admin123)")
            print("  python create_superuser.py list    - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
    else:
        asyncio.run(create_superuser())