# app/api/v1/admin/protected.py
from fastapi import APIRouter, Depends, Request
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime

from app.deps import get_db

from app.deps.admin_auth import check_admin_rate_limit, get_current_active_admin, get_current_admin_user, get_current_superuser
from app.models.admin import AdminUser
from app.crud.admin import admin_user

router = APIRouter()

@router.get("/profile")
async def get_admin_profile(
    current_user: AdminUser = Depends(get_current_active_admin)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞ (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–æ—É—Ç)
    """
    return {
        "id": current_user.id,
        "username": current_user.username,
        "email": current_user.email,
        "is_active": current_user.is_active,
        "is_superuser": current_user.is_superuser,
        "created_at": current_user.created_at,
        "last_login": current_user.last_login,
        "failed_login_attempts": current_user.failed_login_attempts
    }

@router.get("/dashboard")
async def admin_dashboard(
    request: Request,
    current_user: AdminUser = Depends(get_current_active_admin)
):
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å - –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    check_admin_rate_limit(request, max_requests=30, window_minutes=1)
    
    return {
        "message": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É, {current_user.username}!",
        "user_info": {
            "id": current_user.id,
            "username": current_user.username,
            "role": "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω" if current_user.is_superuser else "–ê–¥–º–∏–Ω"
        },
        "server_time": datetime.utcnow(),
        "permissions": {
            "can_manage_users": current_user.is_superuser,
            "can_view_logs": True,
            "can_manage_content": True
        }
    }

@router.get("/users")
async def list_admin_users(
    request: Request,
    current_user: AdminUser = Depends(get_current_superuser),
    db: AsyncSession = Depends(get_db)
):
    """
    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)
    """
    check_admin_rate_limit(request, max_requests=20, window_minutes=1)
    
    users = await admin_user.get_multi(db, limit=50)
    
    return {
        "total_users": len(users),
        "users": [
            {
                "id": user.id,
                "username": user.username,
                "email": user.email,
                "is_active": user.is_active,
                "is_superuser": user.is_superuser,
                "last_login": user.last_login,
                "created_at": user.created_at
            }
            for user in users
        ],
        "requested_by": current_user.username,
        "timestamp": datetime.utcnow()
    }

@router.get("/test-auth-levels")
async def test_auth_levels(
    request: Request,
    current_user: AdminUser = Depends(get_current_admin_user)
):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞
    """
    return {
        "message": "–ë–∞–∑–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞",
        "user": current_user.username,
        "auth_level": "basic_admin",
        "timestamp": datetime.utcnow()
    }

@router.get("/test-superuser")
async def test_superuser_access(
    request: Request,
    current_user: AdminUser = Depends(get_current_superuser)
):
    """
    –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
    """
    return {
        "message": "–î–æ—Å—Ç—É–ø –∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—Å–∫–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º —Ä–∞–∑—Ä–µ—à–µ–Ω",
        "user": current_user.username,
        "auth_level": "superuser",
        "timestamp": datetime.utcnow(),
        "secret_data": "–≠—Ç–æ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—ã! üîê"
    }

@router.post("/test-rate-limit")
async def test_rate_limit(
    request: Request,
    current_user: AdminUser = Depends(get_current_active_admin)
):
    """
    –¢–µ—Å—Ç rate limiting (–ª–∏–º–∏—Ç: 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
    """
    check_admin_rate_limit(request, max_requests=5, window_minutes=1)
    
    return {
        "message": "Rate limit OK",
        "user": current_user.username,
        "ip": request.client.host,
        "timestamp": datetime.utcnow()
    }