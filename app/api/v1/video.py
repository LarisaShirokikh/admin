# app/routers/video.py
import tempfile
import os
import logging
from typing import List, Optional
from fastapi import APIRouter, UploadFile, File, HTTPException, Depends, BackgroundTasks, Query, Form
from sqlalchemy.ext.asyncio import AsyncSession

from app.deps import get_db
from app.crud.video import (
    VideoProcessor, create_video, get_video_by_id, get_video_by_uuid,
    get_videos, get_videos_by_product_id, search_videos, suggest_products_for_video, update_video,
    delete_video, toggle_video_status, toggle_featured_status,
    auto_link_video_to_product, get_featured_videos, find_product_by_title
)
from app.schemas.video import VideoCreate, VideoUpdate, VideoResponse

logger = logging.getLogger(__name__)
router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∏–¥–µ–æ
video_processor = VideoProcessor(media_root="/app/media")

@router.post("/upload/", response_model=VideoResponse)
async def upload_video(
    background_tasks: BackgroundTasks,
    file: UploadFile = File(...),
    title: str = Form(...),
    description: str = Form(""),
    product_title: Optional[str] = Form(None),
    is_featured: bool = Form(False),
    db: AsyncSession = Depends(get_db)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ"""
    logger.info(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ: {file.filename}, —Ä–∞–∑–º–µ—Ä: {file.size if hasattr(file, 'size') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        allowed_formats = ['.mp4', '.mov', '.avi', '.mkv', '.webm']
        file_extension = os.path.splitext(file.filename)[1].lower()
        
        if file_extension not in allowed_formats:
            logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_extension}")
            raise HTTPException(400, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(allowed_formats)}")
        
        logger.info(f"‚úÖ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω: {file_extension}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ media
        media_dir = "/app/media"
        if not os.path.exists(media_dir):
            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {media_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            raise HTTPException(500, f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {media_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if not os.access(media_dir, os.W_OK):
            logger.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {media_dir}")
            raise HTTPException(500, f"–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {media_dir}")
        
        logger.info(f"‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {media_dir} –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        import shutil
        total, used, free = shutil.disk_usage(media_dir)
        free_mb = free // (1024*1024)
        logger.info(f"üíæ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: {free_mb} MB")
        
        if free_mb < 500:  # –ú–µ–Ω—å—à–µ 500MB
            logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {free_mb} MB")
            raise HTTPException(500, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —á–∞—Å—Ç—è–º–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–∞–º—è—Ç–∏
        logger.info("üìñ –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        file_content = b""
        max_size = 100 * 1024 * 1024  # 100MB
        chunk_size = 1024 * 1024  # 1MB chunks
        
        while True:
            chunk = await file.read(chunk_size)
            if not chunk:
                break
            file_content += chunk
            
            if len(file_content) > max_size:
                logger.error(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {len(file_content)} –±–∞–π—Ç")
                raise HTTPException(400, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100MB")
        
        logger.info(f"‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: {len(file_content)} –±–∞–π—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        logger.info("üìÅ –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª...")
        temp_dir = tempfile.gettempdir()
        logger.info(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {temp_dir}")
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension, dir=temp_dir) as temp_file:
            temp_file.write(file_content)
            temp_path = temp_file.name
        
        logger.info(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {temp_path}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
            if not os.path.exists(temp_path):
                logger.error(f"‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è: {temp_path}")
                raise HTTPException(500, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            
            temp_size = os.path.getsize(temp_path)
            logger.info(f"‚úÖ –†–∞–∑–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {temp_size} –±–∞–π—Ç")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
            processing_result = video_processor.process_video(temp_path, file.filename)
            logger.info(f"‚úÖ –í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processing_result}")
            
            # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
            product_id = None
            if product_title:
                logger.info(f"üîç –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç: {product_title}")
                product = await find_product_by_title(db, product_title)
                if product:
                    product_id = product.id
                    logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω: {product_id}")
                else:
                    logger.info("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            video_data = VideoCreate(
                title=title,
                description=description,
                url=processing_result["video_path"],
                thumbnail_url=processing_result["thumbnail_path"],
                duration=processing_result["duration"],
                product_id=product_id,
                is_active=True,
                is_featured=is_featured
            )
            
            video = await create_video(db, video_data)
            logger.info(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ID {video.id}")
            
            # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å
            if not product_id:
                logger.info("üîó –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø—Ä–æ–¥—É–∫—Ç—É...")
                video = await auto_link_video_to_product(db, video.id)
            
            logger.info(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {video.id}")
            return video
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {str(e)}", exc_info=True)
            raise HTTPException(500, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {str(e)}")
        
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_path):
                try:
                    os.unlink(temp_path)
                    logger.info(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_path}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_path}: {e}")
            
    except HTTPException:
        # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {str(e)}", exc_info=True)
        raise HTTPException(500, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

# –î–æ–±–∞–≤–∏–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
@router.get("/system-check")
async def video_system_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    try:
        checks = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        media_dir = "/app/media"
        checks["media_dir_exists"] = os.path.exists(media_dir)
        checks["media_dir_writable"] = os.access(media_dir, os.W_OK) if checks["media_dir_exists"] else False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = tempfile.gettempdir()
        checks["temp_dir"] = temp_dir
        checks["temp_dir_writable"] = os.access(temp_dir, os.W_OK)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        if checks["media_dir_exists"]:
            import shutil
            total, used, free = shutil.disk_usage(media_dir)
            checks["disk_space_mb"] = free // (1024*1024)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∏–¥–µ–æ
        try:
            video_processor_status = str(video_processor)
            checks["video_processor"] = "OK"
        except Exception as e:
            checks["video_processor"] = f"Error: {str(e)}"
        
        return {
            "status": "OK" if all([
                checks.get("media_dir_exists", False),
                checks.get("media_dir_writable", False),
                checks.get("temp_dir_writable", False),
                checks.get("disk_space_mb", 0) > 100
            ]) else "ERROR",
            "checks": checks
        }
        
    except Exception as e:
        return {
            "status": "ERROR",
            "error": str(e)
        }

@router.get("/", response_model=List[VideoResponse])
async def list_videos(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, le=1000),
    is_active: Optional[bool] = Query(None),
    is_featured: Optional[bool] = Query(None),
    product_id: Optional[int] = Query(None),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    return await get_videos(
        db, skip=skip, limit=limit, 
        is_active=is_active, is_featured=is_featured, 
        product_id=product_id
    )

@router.get("/featured/", response_model=List[VideoResponse])
async def list_featured_videos(
    limit: int = Query(10, le=50),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"""
    return await get_featured_videos(db, limit=limit)

@router.get("/search/", response_model=List[VideoResponse])
async def search_videos_endpoint(
    q: str = Query(..., min_length=2),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    return await search_videos(db, q)

@router.get("/{video_id}", response_model=VideoResponse)
async def get_video(
    video_id: int,
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ ID"""
    video = await get_video_by_id(db, video_id)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return video

@router.get("/uuid/{video_uuid}", response_model=VideoResponse)
async def get_video_by_uuid_endpoint(
    video_uuid: str,
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ UUID"""
    video = await get_video_by_uuid(db, video_uuid)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return video

@router.put("/{video_id}", response_model=VideoResponse)
async def update_video_endpoint(
    video_id: int,
    video_data: VideoUpdate,
    db: AsyncSession = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ"""
    video = await get_video_by_id(db, video_id)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    updated_video = await update_video(db, video_id, video_data)
    return updated_video

@router.delete("/{video_id}")
async def delete_video_endpoint(
    video_id: int,
    db: AsyncSession = Depends(get_db)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ"""
    video = await get_video_by_id(db, video_id)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    success = await delete_video(db, video_id)
    if success:
        return {"message": f"–í–∏–¥–µ–æ '{video.title}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ"}
    else:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ")

@router.post("/{video_id}/toggle-status", response_model=VideoResponse)
async def toggle_video_status_endpoint(
    video_id: int,
    db: AsyncSession = Depends(get_db)
):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
    video = await get_video_by_id(db, video_id)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    updated_video = await toggle_video_status(db, video_id)
    return updated_video

@router.post("/{video_id}/toggle-featured", response_model=VideoResponse)
async def toggle_featured_status_endpoint(
    video_id: int,
    db: AsyncSession = Depends(get_db)
):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    video = await get_video_by_id(db, video_id)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    updated_video = await toggle_featured_status(db, video_id)
    return updated_video

@router.post("/{video_id}/auto-link-product", response_model=VideoResponse)
async def auto_link_product_endpoint(
    video_id: int,
    db: AsyncSession = Depends(get_db)
):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –≤–∏–¥–µ–æ –∫ –ø—Ä–æ–¥—É–∫—Ç—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    video = await get_video_by_id(db, video_id)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    updated_video = await auto_link_video_to_product(db, video_id)
    return updated_video

@router.get("/product/{product_id}", response_model=List[VideoResponse])
async def get_product_videos(
    product_id: int,
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    return await get_videos_by_product_id(db, product_id)

# –î–æ–±–∞–≤—å—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:
@router.get("/{video_id}/suggest-products")
async def suggest_products_for_video_endpoint(
    video_id: int,
    db: AsyncSession = Depends(get_db)
):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –≤–∏–¥–µ–æ"""
    video = await get_video_by_id(db, video_id)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    suggestions = await suggest_products_for_video(db, video.title)
    
    return {
        "video_id": video_id,
        "video_title": video.title,
        "suggestions": [
            {
                "product_id": product.id,
                "product_name": product.name,
                "similarity_score": round(score * 100, 1)
            }
            for product, score in suggestions
        ]
    }