# app/routers/video.py (–∑–∞—â–∏—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import tempfile
import os
import logging
from typing import List, Optional
import uuid
from fastapi import APIRouter, UploadFile, File, HTTPException, Depends, BackgroundTasks, Query, Form, Request
from sqlalchemy.ext.asyncio import AsyncSession

from app.deps import get_db
from app.crud.video import (
    VideoProcessor, create_video, get_video_by_id, get_video_by_uuid,
    get_videos, get_videos_by_product_id, search_videos, suggest_products_for_video, update_video,
    delete_video, toggle_video_status, toggle_featured_status,
    auto_link_video_to_product, get_featured_videos, find_product_by_title
)
from app.schemas.video import VideoCreate, VideoUpdate, VideoResponse

# –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –¥–ª—è –∑–∞—â–∏—Ç—ã
from app.deps.admin_auth import get_current_active_admin, get_current_superuser, check_admin_rate_limit
from app.models.admin import AdminUser
from datetime import datetime
from collections import defaultdict

logger = logging.getLogger(__name__)
router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∏–¥–µ–æ
video_processor = VideoProcessor(media_root="/app/media")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–æ–∫ –≤–∏–¥–µ–æ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
video_upload_stats = defaultdict(int)
MAX_UPLOADS_PER_USER_PER_HOUR = 5
MAX_UPLOADS_GLOBAL_PER_HOUR = 20

def check_upload_limits(current_user: AdminUser) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ"""
    user_uploads = video_upload_stats[current_user.username]
    total_uploads = sum(video_upload_stats.values())
    
    if user_uploads >= MAX_UPLOADS_PER_USER_PER_HOUR:
        raise HTTPException(
            status_code=429,
            detail=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({MAX_UPLOADS_PER_USER_PER_HOUR}/—á–∞—Å). "
                   f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    if total_uploads >= MAX_UPLOADS_GLOBAL_PER_HOUR:
        raise HTTPException(
            status_code=429,
            detail=f"–ü—Ä–µ–≤—ã—à–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–≥—Ä—É–∑–æ–∫ ({MAX_UPLOADS_GLOBAL_PER_HOUR}/—á–∞—Å). "
                   f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def register_upload(current_user: AdminUser) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
    video_upload_stats[current_user.username] += 1
    print(f"UPLOAD_REGISTERED: by {current_user.username}. "
          f"User uploads: {video_upload_stats[current_user.username]}, "
          f"Total: {sum(video_upload_stats.values())}")

def validate_video_file(file: UploadFile) -> None:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    allowed_formats = ['.mp4', '.mov', '.avi', '.mkv', '.webm']
    file_extension = os.path.splitext(file.filename)[1].lower()
    if file_extension not in allowed_formats:
        raise HTTPException(400, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(allowed_formats)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Content-Type
    allowed_content_types = [
        'video/mp4', 'video/quicktime', 'video/x-msvideo', 
        'video/x-matroska', 'video/webm'
    ]
    if file.content_type and file.content_type not in allowed_content_types:
        raise HTTPException(400, f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π Content-Type: {file.content_type}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if any(char in file.filename for char in ['<', '>', ':', '"', '|', '?', '*', '\0']):
        raise HTTPException(400, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if len(file.filename) > 100:
        raise HTTPException(400, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)")

# ========== –ó–ê–ì–†–£–ó–ö–ê –í–ò–î–ï–û (—Å—Ç—Ä–æ–≥–∞—è –∑–∞—â–∏—Ç–∞) ==========

@router.post("/upload/", response_model=VideoResponse)
async def upload_video(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º Request
    background_tasks: BackgroundTasks,
    file: UploadFile = File(...),
    title: str = Form(...),
    description: str = Form(""),
    product_title: Optional[str] = Form(None),
    is_featured: bool = Form(False),
    current_user: AdminUser = Depends(get_current_active_admin),  # –ó–ê–©–ò–¢–ê
    db: AsyncSession = Depends(get_db)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ - –ë–´–°–¢–†–ê–Ø –≤–µ—Ä—Å–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–æ–π"""
    # –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –°–¢–†–û–ì–ò–ô rate limiting –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    check_admin_rate_limit(request, max_requests=3, window_minutes=30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
    check_upload_limits(current_user)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    validate_video_file(file)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
    print(f"VIDEO_UPLOAD_START: Admin {current_user.username} uploading '{file.filename}' with title '{title}'")
    
    logger.info(f"üé¨ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ: {file.filename} by {current_user.username}")
    
    # –ü–†–Ø–ú–ê–Ø –∑–∞–ø–∏—Å—å –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    file_uuid = str(uuid.uuid4())
    base_name = os.path.splitext(file.filename)[0]
    # –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    safe_base_name = "".join(c for c in base_name if c.isalnum() or c in (' ', '-', '_')).strip()[:50]
    output_filename = f"{file_uuid}_{safe_base_name}.mp4"
    final_path = f"/app/media/videos/{output_filename}"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs("/app/media/videos", exist_ok=True)
        
        # –ü–û–¢–û–ö–û–í–ê–Ø –∑–∞–ø–∏—Å—å –Ω–∞–ø—Ä—è–º—É—é –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        total_size = 0
        max_size = 100 * 1024 * 1024  # 100MB
        
        with open(final_path, "wb") as f:
            while True:
                chunk = await file.read(1024 * 1024)  # 1MB chunk
                if not chunk:
                    break
                
                total_size += len(chunk)
                if total_size > max_size:
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω —Ä–∞–∑–º–µ—Ä
                    os.unlink(final_path)
                    raise HTTPException(400, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: 100MB")
                
                f.write(chunk)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
        try:
            import subprocess
            subprocess.run(['chmod', '644', final_path], check=True)
            logger.info(f"üîß –ü—Ä–∞–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {final_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞: {e}")
        
        # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç
        product_id = None
        if product_title:
            product = await find_product_by_title(db, product_title)
            if product:
                product_id = product.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        video_data = VideoCreate(
            title=title,
            description=description,
            url=f"/media/videos/{output_filename}",
            thumbnail_url=None,
            duration=None,
            product_id=product_id,
            is_active=True,
            is_featured=is_featured
        )
        
        video = await create_video(db, video_data)
        
        # –ê–≤—Ç–æ–ø—Ä–∏–≤—è–∑–∫–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç—É
        if not product_id:
            video = await auto_link_video_to_product(db, video.id)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        register_upload(current_user)
        
        print(f"VIDEO_UPLOAD_SUCCESS: Video ID {video.id} uploaded by {current_user.username}")
        logger.info(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ID {video.id} by {current_user.username}")
        
        return video
        
    except HTTPException:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if os.path.exists(final_path):
            os.unlink(final_path)
        raise
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if os.path.exists(final_path):
            os.unlink(final_path)
        print(f"VIDEO_UPLOAD_ERROR: Failed upload by {current_user.username}: {str(e)}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

# ========== –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–í–ï–†–ö–ò (–¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤) ==========

@router.get("/system-check")
async def video_system_check(
    request: Request,
    current_user: AdminUser = Depends(get_current_active_admin)  # –ó–ê–©–ò–¢–ê
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    check_admin_rate_limit(request, max_requests=10, window_minutes=1)
    
    try:
        checks = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        media_dir = "/app/media"
        checks["media_dir_exists"] = os.path.exists(media_dir)
        checks["media_dir_writable"] = os.access(media_dir, os.W_OK) if checks["media_dir_exists"] else False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = tempfile.gettempdir()
        checks["temp_dir"] = temp_dir
        checks["temp_dir_writable"] = os.access(temp_dir, os.W_OK)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        if checks["media_dir_exists"]:
            import shutil
            total, used, free = shutil.disk_usage(media_dir)
            checks["disk_space_mb"] = free // (1024*1024)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∏–¥–µ–æ
        try:
            video_processor_status = str(video_processor)
            checks["video_processor"] = "OK"
        except Exception as e:
            checks["video_processor"] = f"Error: {str(e)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–æ–∫
        checks["upload_stats"] = {
            "user_uploads_this_hour": video_upload_stats[current_user.username],
            "total_uploads_this_hour": sum(video_upload_stats.values()),
            "user_limit": MAX_UPLOADS_PER_USER_PER_HOUR,
            "global_limit": MAX_UPLOADS_GLOBAL_PER_HOUR
        }
        
        print(f"Admin {current_user.username} checked video system status")
        
        return {
            "status": "OK" if all([
                checks.get("media_dir_exists", False),
                checks.get("media_dir_writable", False),
                checks.get("temp_dir_writable", False),
                checks.get("disk_space_mb", 0) > 100
            ]) else "ERROR",
            "checks": checks,
            "requested_by": current_user.username,
            "timestamp": datetime.utcnow()
        }
        
    except Exception as e:
        print(f"ERROR: Video system check failed for {current_user.username}: {str(e)}")
        return {
            "status": "ERROR",
            "error": str(e),
            "requested_by": current_user.username
        }

# ========== –ß–¢–ï–ù–ò–ï (–¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤) ==========

@router.get("/", response_model=List[VideoResponse])
async def list_videos(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º Request
    skip: int = Query(0, ge=0),
    limit: int = Query(100, le=1000),
    is_active: Optional[bool] = Query(None),
    is_featured: Optional[bool] = Query(None),
    product_id: Optional[int] = Query(None),
    current_user: AdminUser = Depends(get_current_active_admin),  # –ó–ê–©–ò–¢–ê
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    check_admin_rate_limit(request, max_requests=100, window_minutes=1)
    
    print(f"Admin {current_user.username} accessing videos list")
    
    videos = await get_videos(
        db, skip=skip, limit=limit, 
        is_active=is_active, is_featured=is_featured, 
        product_id=product_id
    )
    return videos

@router.get("/stats/summary")
async def get_videos_stats(
    request: Request,
    current_user: AdminUser = Depends(get_current_active_admin),
    db: AsyncSession = Depends(get_db)
):
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–µ–æ
    """
    check_admin_rate_limit(request, max_requests=20, window_minutes=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    all_videos = await get_videos(db, skip=0, limit=10000)
    featured_videos = await get_featured_videos(db, limit=1000)
    
    total_videos = len(all_videos)
    active_videos = len([v for v in all_videos if v.is_active])
    inactive_videos = total_videos - active_videos
    featured_count = len(featured_videos)
    
    # –í–∏–¥–µ–æ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º
    with_products = len([v for v in all_videos if v.product_id])
    without_products = total_videos - with_products
    
    stats = {
        "total_videos": total_videos,
        "active_videos": active_videos,
        "inactive_videos": inactive_videos,
        "featured_videos": featured_count,
        "videos_with_products": with_products,
        "videos_without_products": without_products,
        "upload_limits": {
            "user_uploads_this_hour": video_upload_stats[current_user.username],
            "total_uploads_this_hour": sum(video_upload_stats.values()),
            "user_limit": MAX_UPLOADS_PER_USER_PER_HOUR,
            "global_limit": MAX_UPLOADS_GLOBAL_PER_HOUR
        },
        "last_updated": datetime.utcnow(),
        "requested_by": current_user.username,
        "user_role": "superuser" if current_user.is_superuser else "admin"
    }
    
    print(f"Admin {current_user.username} requested videos statistics")
    return stats

@router.get("/featured/", response_model=List[VideoResponse])
async def list_featured_videos(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º Request
    limit: int = Query(10, le=50),
    current_user: AdminUser = Depends(get_current_active_admin),  # –ó–ê–©–ò–¢–ê
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"""
    check_admin_rate_limit(request)
    
    videos = await get_featured_videos(db, limit=limit)
    return videos

@router.get("/search/", response_model=List[VideoResponse])
async def search_videos_endpoint(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º Request
    q: str = Query(..., min_length=2),
    current_user: AdminUser = Depends(get_current_active_admin),  # –ó–ê–©–ò–¢–ê
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    check_admin_rate_limit(request)
    
    videos = await search_videos(db, q)
    return videos

@router.get("/{video_id}", response_model=VideoResponse)
async def get_video(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º Request
    video_id: int,
    current_user: AdminUser = Depends(get_current_active_admin),  # –ó–ê–©–ò–¢–ê
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ ID"""
    check_admin_rate_limit(request)
    
    video = await get_video_by_id(db, video_id)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print(f"Admin {current_user.username} viewed video {video_id}")
    return video

@router.get("/uuid/{video_uuid}", response_model=VideoResponse)
async def get_video_by_uuid_endpoint(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º Request
    video_uuid: str,
    current_user: AdminUser = Depends(get_current_active_admin),  # –ó–ê–©–ò–¢–ê
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ UUID"""
    check_admin_rate_limit(request)
    
    video = await get_video_by_uuid(db, video_uuid)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return video

@router.get("/product/{product_id}", response_model=List[VideoResponse])
async def get_product_videos(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º Request
    product_id: int,
    current_user: AdminUser = Depends(get_current_active_admin),  # –ó–ê–©–ò–¢–ê
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    check_admin_rate_limit(request)
    
    videos = await get_videos_by_product_id(db, product_id)
    return videos

@router.get("/{video_id}/suggest-products")
async def suggest_products_for_video_endpoint(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º Request
    video_id: int,
    current_user: AdminUser = Depends(get_current_active_admin),  # –ó–ê–©–ò–¢–ê
    db: AsyncSession = Depends(get_db)
):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –≤–∏–¥–µ–æ"""
    check_admin_rate_limit(request)
    
    video = await get_video_by_id(db, video_id)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    suggestions = await suggest_products_for_video(db, video.title)
    
    return {
        "video_id": video_id,
        "video_title": video.title,
        "suggestions": [
            {
                "product_id": product.id,
                "product_name": product.name,
                "similarity_score": round(score * 100, 1)
            }
            for product, score in suggestions
        ],
        "requested_by": current_user.username
    }

# ========== –û–ë–ù–û–í–õ–ï–ù–ò–ï (–¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤) ==========

@router.put("/{video_id}", response_model=VideoResponse)
async def update_video_endpoint(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º Request
    video_id: int,
    video_data: VideoUpdate,
    current_user: AdminUser = Depends(get_current_active_admin),  # –ó–ê–©–ò–¢–ê
    db: AsyncSession = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ"""
    check_admin_rate_limit(request, max_requests=30, window_minutes=1)
    
    video = await get_video_by_id(db, video_id)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    print(f"Admin {current_user.username} updating video {video_id} ('{video.title}')")
    
    updated_video = await update_video(db, video_id, video_data)
    
    print(f"SUCCESS: Video {video_id} updated by {current_user.username}")
    return updated_video

@router.post("/{video_id}/toggle-status", response_model=VideoResponse)
async def toggle_video_status_endpoint(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º Request
    video_id: int,
    current_user: AdminUser = Depends(get_current_active_admin),  # –ó–ê–©–ò–¢–ê
    db: AsyncSession = Depends(get_db)
):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
    check_admin_rate_limit(request, max_requests=50, window_minutes=1)
    
    video = await get_video_by_id(db, video_id)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    print(f"Admin {current_user.username} toggling video {video_id} status")
    
    updated_video = await toggle_video_status(db, video_id)
    return updated_video

@router.post("/{video_id}/toggle-featured", response_model=VideoResponse)
async def toggle_featured_status_endpoint(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º Request
    video_id: int,
    current_user: AdminUser = Depends(get_current_active_admin),  # –ó–ê–©–ò–¢–ê
    db: AsyncSession = Depends(get_db)
):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    check_admin_rate_limit(request, max_requests=50, window_minutes=1)
    
    video = await get_video_by_id(db, video_id)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    print(f"Admin {current_user.username} toggling video {video_id} featured status")
    
    updated_video = await toggle_featured_status(db, video_id)
    return updated_video

@router.post("/{video_id}/auto-link-product", response_model=VideoResponse)
async def auto_link_product_endpoint(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º Request
    video_id: int,
    current_user: AdminUser = Depends(get_current_active_admin),  # –ó–ê–©–ò–¢–ê
    db: AsyncSession = Depends(get_db)
):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –≤–∏–¥–µ–æ –∫ –ø—Ä–æ–¥—É–∫—Ç—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    check_admin_rate_limit(request, max_requests=30, window_minutes=1)
    
    video = await get_video_by_id(db, video_id)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    print(f"Admin {current_user.username} auto-linking video {video_id} to product")
    
    updated_video = await auto_link_video_to_product(db, video_id)
    return updated_video

# ========== –£–î–ê–õ–ï–ù–ò–ï (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞) ==========

@router.delete("/{video_id}")
async def delete_video_endpoint(
    request: Request,  # –î–æ–±–∞–≤–ª—è–µ–º Request
    video_id: int,
    current_user: AdminUser = Depends(get_current_superuser),  # –¢–û–õ–¨–ö–û –°–£–ü–ï–†–ê–î–ú–ò–ù!
    db: AsyncSession = Depends(get_db)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)"""
    check_admin_rate_limit(request, max_requests=10, window_minutes=1)
    
    video = await get_video_by_id(db, video_id)
    if not video:
        raise HTTPException(status_code=404, detail="–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –î–ï–ô–°–¢–í–ò–ï - –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"CRITICAL: Superuser {current_user.username} deleting video {video_id} ('{video.title}')")
    print(f"Video file: {video.url}")
    
    success = await delete_video(db, video_id)
    if success:
        print(f"SUCCESS: Video {video_id} ('{video.title}') deleted by superuser {current_user.username}")
        return {"message": f"–í–∏–¥–µ–æ '{video.title}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ"}
    else:
        print(f"ERROR: Failed to delete video {video_id}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ")

# ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ê–ú–ò (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω) ==========

@router.get("/upload-stats/detailed")
async def get_detailed_upload_stats(
    request: Request,
    current_user: AdminUser = Depends(get_current_superuser)  # –¢–û–õ–¨–ö–û –°–£–ü–ï–†–ê–î–ú–ò–ù
):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)"""
    check_admin_rate_limit(request, max_requests=10, window_minutes=1)
    
    return {
        "upload_stats_by_user": dict(video_upload_stats),
        "total_uploads_this_hour": sum(video_upload_stats.values()),
        "limits": {
            "per_user_per_hour": MAX_UPLOADS_PER_USER_PER_HOUR,
            "global_per_hour": MAX_UPLOADS_GLOBAL_PER_HOUR
        },
        "requested_by": current_user.username,
        "timestamp": datetime.utcnow()
    }

@router.post("/reset-upload-limits")
async def reset_upload_limits(
    request: Request,
    current_user: AdminUser = Depends(get_current_superuser)  # –¢–û–õ–¨–ö–û –°–£–ü–ï–†–ê–î–ú–ò–ù
):
    """–°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ (—ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –º–µ—Ä–∞ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)"""
    check_admin_rate_limit(request, max_requests=3, window_minutes=5)
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –î–ï–ô–°–¢–í–ò–ï
    print(f"EMERGENCY: Superuser {current_user.username} resetting video upload limits")
    
    old_stats = dict(video_upload_stats)
    video_upload_stats.clear()
    
    print(f"SUCCESS: Upload limits reset by superuser {current_user.username}")
    
    return {
        "message": "–õ–∏–º–∏—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã",
        "old_stats": old_stats,
        "reset_by": current_user.username,
        "timestamp": datetime.utcnow()
    }